{"name":"Launchpad","tagline":"Library to access a Novation Launchpad in a unix environment","body":"launchpad\r\n=========\r\n\r\nThis library can be used to access a [Novation Launchpad](http://uk.novationmusic.com/midi-controllers-digital-dj/launchpad)\r\nfrom a unix machine. To connect, a block-device is used.\r\n\r\nCurrently the library cannot be used, it will only show the data received by the\r\nlaunchpad.\r\n\r\nusage\r\n-----\r\n\r\nYou can find a example receiving and sending data in\r\n[BounceToLaunchpadExample.java](https://github.com/rynr/launchpad/blob/master/src/test/java/org/rjung/utils/launchpad/example/BounceToLaunchpadExample.java)\r\nin the test-directory.\r\n\r\nTo retrieve messages, implement a\r\n[LaunchpadHandler](https://github.com/rynr/launchpad/blob/master/src/main/java/org/rjung/utils/launchpad/LaunchpadHandler.java)\r\nand register it to the launchpad instance. The LaunchpadHandler will now be\r\ncalled always, when a Command is received.\r\n\r\n```java\r\n    launchpad.addHandler(new LaunchpadHandler() {\r\n        public void recieve(MidiCommand command) {\r\n            System.out.println(command);\r\n        }\r\n    });\r\n```\r\n\r\nTo send Commands, you can use the methods `off(x, y)` or `set(x, y, color)`.\r\n\r\n```java\r\n    launchpad.off(1, 2);\r\n    launchpad.set(2, 3, Color.RED);\r\n```\r\n\r\nInfo\r\n----\r\n\r\n - [Info](https://rynr.github.io/launchpad/)\r\n - [Github](https://github.com/rynr/launchpad)\r\n - [Bugs](https://github.com/rynr/launchpad/issues)\r\n - [![Build Status](https://travis-ci.org/rynr/launchpad.svg?branch=master)](https://travis-ci.org/rynr/launchpad)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}